{"ast":null,"code":"import createStore from 'unistore';\nimport axios from \"axios\";\nimport moment from 'moment';\nconst initialState = {\n  originPlace: \"\",\n  departureDate: \"\",\n  kiwiUrl: \"https://api.skypicker.com/flights?partner=picky\",\n  ticketList: [],\n  airlineList: [\"ID\", \"QG\", \"GA\", \"QZ\", \"JT\", \"SJ\", \"IW\"],\n  airlineImageLink: {\n    ID: \"https://4.bp.blogspot.com/-qdPMmSV78LE/UYY_foFEDwI/AAAAAAAANV0/-apMs-fBjsM/s1600/LOGO+BATIK+AIR.png\",\n    QG: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/2012_Citilink_Logo.svg/250px-2012_Citilink_Logo.svg.png\",\n    GA: \"https://upload.wikimedia.org/wikipedia/id/thumb/f/fe/Garuda_Indonesia_Logo.svg/250px-Garuda_Indonesia_Logo.svg.png\",\n    QZ: \"https://seeklogo.com/images/A/Air_Asia-logo-5ACDC17858-seeklogo.com.png\",\n    JT: \"https://upload.wikimedia.org/wikipedia/id/thumb/5/59/Lion_Air.svg/250px-Lion_Air.svg.png\",\n    SJ: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/LOGO_SJ_VERTIKAL.png/250px-LOGO_SJ_VERTIKAL.png\",\n    IW: \"https://upload.wikimedia.org/wikipedia/id/thumb/a/a9/Wings_Air.svg/150px-Wings_Air.svg.png\"\n  },\n  listDestinasi: [],\n  listHasilTriposo: [],\n  apiUrl: \"https://www.triposo.com/api/20190906/location.json?account=HRJIHM7V&token=p16qxx6luhn0k0fhlou5m4h52poe8c0f&id=\",\n  idKota: \"\",\n  search: \"\",\n  latitudeKota: '',\n  longitudeKota: '',\n  isLoading: true,\n  username: '',\n  email: '',\n  password: '',\n  keyword: '',\n  is_login: false\n};\nexport const store = createStore(initialState);\nexport const actions = store => ({\n  handleSearch: (state, e) => {\n    let value = e.target.value;\n    store.setState({\n      search: value,\n      idKota: value\n    });\n    console.warn(\"cek store\", store.getState());\n  },\n  // Mendefinisikan fungsi axios untuk api Triposo\n  kategoriKota: async state => {\n    const url = state.apiUrl + state.idKota;\n    await axios.get(url).then(function (response) {\n      store.setState({\n        listHasilTriposo: response.data.results[0],\n        listDestinasi: response.data.results[0].images,\n        latitudeKota: response.data.results[0].coordinates.latitude,\n        longitudeKota: response.data.results[0].coordinates.longitude,\n        isLoading: false\n      }); // handle success\n\n      console.log(\"cek isi response\", response);\n    }).catch(function (error) {\n      store.setState({\n        isLoading: false\n      }); // handle error\n\n      console.log(error);\n    });\n  },\n  changeInput: (state, event) => {\n    store.setState({\n      [event.target.name]: event.target.value\n    });\n  },\n  postOriginAndDepartureDate: async (state, city) => {\n    const flyFrom = \"&flyFrom=\" + state.originPlace;\n    const dateFrom = \"&dateFrom=\" + state.departureDate;\n    const dateTo = \"&dateTo=\" + state.departureDate;\n    const url = state.kiwiUrl + flyFrom + dateFrom + dateTo;\n    const self = store;\n    const that = state;\n    await axios.get(url).then(function (response) {\n      const responseList = response.data.data;\n      const filteredList = responseList.filter(data => {\n        return data.cityTo === city;\n      }).filter(data => {\n        const airlineList = that.airlineList;\n\n        for (let i = 0; i < 7; i++) {\n          if (airlineList[i] === data.airlines[0]) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n      self.setState({\n        ticketList: filteredList\n      });\n    }).catch(function (error) {\n      console.warn(error);\n    });\n  },\n  convertTimestamp: (state, time) => {\n    const date = new Date(time * 1000);\n    const stringTime = moment(date).utcOffset(\"+0700\").format(\"HH:mm:ss\");\n    return stringTime;\n  },\n  // Atur kategori dinamis untuk idKotA\n  setCategory: (state, category) => {\n    return {\n      idKotA: category\n    };\n  },\n  postLogin: async state => {\n    const username = store.getState('username');\n    const password = store.getState('password');\n    const mydata = {\n      username: username,\n      password: password\n    };\n    const test = await axios.post(\"https://groupproject.free.beeceptor.com/masuk\", mydata).then(response => {\n      return response;\n    }).catch(error => {\n      return false;\n    });\n\n    if (test) {\n      store.setState({\n        \"accKey\": test.data.accKey,\n        \"is_login\": true,\n        \"email\": test.data.email,\n        \"username\": test.data.username\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/home/alta9/Documents/portofolio_react/src/store.js"],"names":["createStore","axios","moment","initialState","originPlace","departureDate","kiwiUrl","ticketList","airlineList","airlineImageLink","ID","QG","GA","QZ","JT","SJ","IW","listDestinasi","listHasilTriposo","apiUrl","idKota","search","latitudeKota","longitudeKota","isLoading","username","email","password","keyword","is_login","store","actions","handleSearch","state","e","value","target","setState","console","warn","getState","kategoriKota","url","get","then","response","data","results","images","coordinates","latitude","longitude","log","catch","error","changeInput","event","name","postOriginAndDepartureDate","city","flyFrom","dateFrom","dateTo","self","that","responseList","filteredList","filter","cityTo","i","airlines","convertTimestamp","time","date","Date","stringTime","utcOffset","format","setCategory","category","idKotA","postLogin","mydata","test","post","accKey"],"mappings":"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","sourcesContent":["import createStore from 'unistore';\nimport axios from \"axios\";\nimport moment from 'moment';\n\nconst initialState = {\n    originPlace: \"\",\n    departureDate: \"\",\n    kiwiUrl: \"https://api.skypicker.com/flights?partner=picky\",\n    ticketList: [],\n    airlineList: [\"ID\", \"QG\", \"GA\", \"QZ\", \"JT\", \"SJ\", \"IW\"],\n    airlineImageLink: {\n        ID: \"https://4.bp.blogspot.com/-qdPMmSV78LE/UYY_foFEDwI/AAAAAAAANV0/-apMs-fBjsM/s1600/LOGO+BATIK+AIR.png\",\n        QG: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/2012_Citilink_Logo.svg/250px-2012_Citilink_Logo.svg.png\",\n        GA: \"https://upload.wikimedia.org/wikipedia/id/thumb/f/fe/Garuda_Indonesia_Logo.svg/250px-Garuda_Indonesia_Logo.svg.png\",\n        QZ: \"https://seeklogo.com/images/A/Air_Asia-logo-5ACDC17858-seeklogo.com.png\",\n        JT: \"https://upload.wikimedia.org/wikipedia/id/thumb/5/59/Lion_Air.svg/250px-Lion_Air.svg.png\",\n        SJ: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/LOGO_SJ_VERTIKAL.png/250px-LOGO_SJ_VERTIKAL.png\",\n        IW: \"https://upload.wikimedia.org/wikipedia/id/thumb/a/a9/Wings_Air.svg/150px-Wings_Air.svg.png\"\n    },\n    listDestinasi : [],\n    listHasilTriposo : [],\n    apiUrl : \"https://www.triposo.com/api/20190906/location.json?account=HRJIHM7V&token=p16qxx6luhn0k0fhlou5m4h52poe8c0f&id=\",\n    idKota : \"\",\n    search : \"\",\n    latitudeKota : '',\n    longitudeKota : '',\n    isLoading: true,\n    username:'',\n    email:'',\n    password:'',\n    keyword:'',\n    is_login: false\n};\n\nexport const store = createStore(initialState);\n\nexport const actions = store => ({\n    handleSearch : (state,e) => {\n        let value = e.target.value;\n        store.setState({ search :value, idKota:value});\n        console.warn(\"cek store\", store.getState())\n    },\n\n    // Mendefinisikan fungsi axios untuk api Triposo\n    kategoriKota : async (state) => {\n        const url = state.apiUrl + state.idKota\n        await axios\n            .get(url)\n            .then(function(response) {\n                store.setState({ \n                    listHasilTriposo: response.data.results[0], \n                    listDestinasi: response.data.results[0].images,\n                    latitudeKota: response.data.results[0].coordinates.latitude,\n                    longitudeKota: response.data.results[0].coordinates.longitude,\n                    isLoading: false });\n                // handle success\n                console.log(\"cek isi response\",response);\n            })\n            .catch(function(error) {\n                store.setState({ isLoading: false });\n                // handle error\n                console.log(error);\n            });\n    },\n  \n    changeInput: (state, event) => {\n        store.setState({[event.target.name]: event.target.value});\n    },\n\n    postOriginAndDepartureDate: async (state, city) => {\n        const flyFrom = \"&flyFrom=\" + state.originPlace;\n        const dateFrom = \"&dateFrom=\" + state.departureDate;\n        const dateTo = \"&dateTo=\" + state.departureDate;\n        const url = state.kiwiUrl + flyFrom + dateFrom + dateTo;\n        const self = store;\n        const that = state;\n        await axios\n            .get(url)\n            .then(function (response) {\n                const responseList = response.data.data;\n                const filteredList = responseList.filter(data => {\n                    return data.cityTo === city;\n                }).filter(data => {\n                    const airlineList = that.airlineList;\n                    for (let i=0; i < 7; i++) {\n                        if (airlineList[i] === data.airlines[0]) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n                self.setState({ ticketList: filteredList });\n            })\n            .catch(function (error) {\n                console.warn(error);\n            })\n    },\n\n    convertTimestamp: (state, time) => {\n        const date = new Date(time*1000);\n        const stringTime = moment(date).utcOffset(\"+0700\").format(\"HH:mm:ss\");\n        return stringTime;\n    },\n\n    // Atur kategori dinamis untuk idKotA\n    setCategory: (state, category) => {\n        return {idKotA : category}\n    },\n    \n    postLogin : async (state) => {\n        const username = store.getState('username')\n        const password = store.getState('password')\n        const mydata = {\n            username: username,\n            password: password\n        };\n        const test = await axios\n            .post(\"https://groupproject.free.beeceptor.com/masuk\", mydata)\n            .then(response => {\n                return response\n            })\n            .catch(error => {\n                return false\n        })\n        if (test) {\n            store.setState({\n                \"accKey\": test.data.accKey,\n                \"is_login\": true,\n                \"email\": test.data.email,\n                \"username\": test.data.username\n            });\n        }\n    }\n})"]},"metadata":{},"sourceType":"module"}