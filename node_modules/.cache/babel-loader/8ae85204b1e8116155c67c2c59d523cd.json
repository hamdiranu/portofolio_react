{"ast":null,"code":"import createStore from 'unistore';\nimport axios from \"axios\";\nimport moment from 'moment';\nconst initialState = {\n  originPlace: \"\",\n  departureDate: \"\",\n  kiwiUrl: \"https://api.skypicker.com/flights?partner=picky\",\n  ticketList: [],\n  airlineList: [\"ID\", \"QG\", \"GA\", \"QZ\", \"JT\", \"SJ\", \"IW\"],\n  airlineImageLink: {\n    ID: \"https://4.bp.blogspot.com/-qdPMmSV78LE/UYY_foFEDwI/AAAAAAAANV0/-apMs-fBjsM/s1600/LOGO+BATIK+AIR.png\",\n    QG: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/2012_Citilink_Logo.svg/250px-2012_Citilink_Logo.svg.png\",\n    GA: \"https://upload.wikimedia.org/wikipedia/id/thumb/f/fe/Garuda_Indonesia_Logo.svg/250px-Garuda_Indonesia_Logo.svg.png\",\n    QZ: \"https://seeklogo.com/images/A/Air_Asia-logo-5ACDC17858-seeklogo.com.png\",\n    JT: \"https://upload.wikimedia.org/wikipedia/id/thumb/5/59/Lion_Air.svg/250px-Lion_Air.svg.png\",\n    SJ: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/LOGO_SJ_VERTIKAL.png/250px-LOGO_SJ_VERTIKAL.png\",\n    IW: \"https://upload.wikimedia.org/wikipedia/id/thumb/a/a9/Wings_Air.svg/150px-Wings_Air.svg.png\"\n  },\n  listDestinasi: [],\n  listHasilTriposo: [],\n  apiUrl: \"https://www.triposo.com/api/20190906/location.json?account=HRJIHM7V&token=p16qxx6luhn0k0fhlou5m4h52poe8c0f&id=\",\n  idKota: \"Bandung\",\n  latitudeKota: '',\n  longitudeKota: '',\n  isLoading: true,\n  username: '',\n  email: '',\n  password: '',\n  keyword: '',\n  is_login: false\n};\nexport const store = createStore(initialState);\nexport const actions = store => ({\n  // Mendefinisikan fungsi axios untuk api Triposo\n  kategoriKota: async (state, event) => {\n    console.log(\"cek isi e\", event);\n    await store.setState({\n      idKota: event\n    });\n    console.log(\"cek ganti state idKota\", store.getState().idKota); // console.log(\"cek ganti state idKota\", store.getState().idKota)\n\n    const url = state.apiUrl + event;\n    console.log(\"cek URL\", state.apiUrl);\n    await axios.get(url).then(function (response) {\n      store.setState({\n        listHasilTriposo: response.data.results[0],\n        listDestinasi: response.data.results[0].images,\n        latitudeKota: response.data.results[0].coordinates.latitude,\n        longitudeKota: response.data.results[0].coordinates.longitude,\n        idKota: response.data.results[0].name,\n        isLoading: false\n      }); // handle success\n\n      console.log(\"cek isi response\", response);\n    }).catch(function (error) {\n      store.setState({\n        isLoading: false\n      }); // handle error\n\n      console.log(error);\n    });\n  },\n  changeInput: (state, event) => {\n    store.setState({\n      [event.target.name]: event.target.value\n    });\n  },\n  postOriginAndDepartureDate: async (state, city) => {\n    const flyFrom = \"&flyFrom=\" + state.originPlace;\n    const dateFrom = \"&dateFrom=\" + state.departureDate;\n    const dateTo = \"&dateTo=\" + state.departureDate;\n    const url = state.kiwiUrl + flyFrom + dateFrom + dateTo;\n    const self = store;\n    const that = state;\n    await axios.get(url).then(function (response) {\n      const responseList = response.data.data;\n      const filteredList = responseList.filter(data => {\n        return data.cityTo === city;\n      }).filter(data => {\n        const airlineList = that.airlineList;\n\n        for (let i = 0; i < 7; i++) {\n          if (airlineList[i] === data.airlines[0]) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n      self.setState({\n        ticketList: filteredList\n      });\n    }).catch(function (error) {\n      console.warn(error);\n    });\n  },\n  convertTimestamp: (state, time) => {\n    const date = new Date(time * 1000);\n    const stringTime = moment(date).utcOffset(\"+0700\").format(\"HH:mm:ss\");\n    return stringTime;\n  },\n  // Atur kategori dinamis untuk idKotA\n  setCategory: (state, category) => {\n    return {\n      idKotA: category\n    };\n  },\n  postLogin: async state => {\n    const username = store.getState('username');\n    const password = store.getState('password');\n    const mydata = {\n      username: username,\n      password: password\n    };\n    const test = await axios.post(\"https://groupproject.free.beeceptor.com/masuk\", mydata).then(response => {\n      return response;\n    }).catch(error => {\n      return false;\n    });\n\n    if (test) {\n      store.setState({\n        \"accKey\": test.data.accKey,\n        \"is_login\": true,\n        \"email\": test.data.email,\n        \"username\": test.data.username\n      });\n    }\n  }\n});","map":{"version":3,"sources":["/home/alta9/Documents/Grup Project/group_project_react/src/store.js"],"names":["createStore","axios","moment","initialState","originPlace","departureDate","kiwiUrl","ticketList","airlineList","airlineImageLink","ID","QG","GA","QZ","JT","SJ","IW","listDestinasi","listHasilTriposo","apiUrl","idKota","latitudeKota","longitudeKota","isLoading","username","email","password","keyword","is_login","store","actions","kategoriKota","state","event","console","log","setState","getState","url","get","then","response","data","results","images","coordinates","latitude","longitude","name","catch","error","changeInput","target","value","postOriginAndDepartureDate","city","flyFrom","dateFrom","dateTo","self","that","responseList","filteredList","filter","cityTo","i","airlines","warn","convertTimestamp","time","date","Date","stringTime","utcOffset","format","setCategory","category","idKotA","postLogin","mydata","test","post","accKey"],"mappings":"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","sourcesContent":["import createStore from 'unistore';\nimport axios from \"axios\";\nimport moment from 'moment';\n\nconst initialState = {\n    originPlace: \"\",\n    departureDate: \"\",\n    kiwiUrl: \"https://api.skypicker.com/flights?partner=picky\",\n    ticketList: [],\n    airlineList: [\"ID\", \"QG\", \"GA\", \"QZ\", \"JT\", \"SJ\", \"IW\"],\n    airlineImageLink: {\n        ID: \"https://4.bp.blogspot.com/-qdPMmSV78LE/UYY_foFEDwI/AAAAAAAANV0/-apMs-fBjsM/s1600/LOGO+BATIK+AIR.png\",\n        QG: \"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d4/2012_Citilink_Logo.svg/250px-2012_Citilink_Logo.svg.png\",\n        GA: \"https://upload.wikimedia.org/wikipedia/id/thumb/f/fe/Garuda_Indonesia_Logo.svg/250px-Garuda_Indonesia_Logo.svg.png\",\n        QZ: \"https://seeklogo.com/images/A/Air_Asia-logo-5ACDC17858-seeklogo.com.png\",\n        JT: \"https://upload.wikimedia.org/wikipedia/id/thumb/5/59/Lion_Air.svg/250px-Lion_Air.svg.png\",\n        SJ: \"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/LOGO_SJ_VERTIKAL.png/250px-LOGO_SJ_VERTIKAL.png\",\n        IW: \"https://upload.wikimedia.org/wikipedia/id/thumb/a/a9/Wings_Air.svg/150px-Wings_Air.svg.png\"\n    },\n    listDestinasi : [],\n    listHasilTriposo : [],\n    apiUrl : \"https://www.triposo.com/api/20190906/location.json?account=HRJIHM7V&token=p16qxx6luhn0k0fhlou5m4h52poe8c0f&id=\",\n    idKota : \"Bandung\",\n    latitudeKota : '',\n    longitudeKota : '',\n    isLoading: true,\n    username:'',\n    email:'',\n    password:'',\n    keyword:'',\n    is_login: false\n};\n\nexport const store = createStore(initialState);\n\nexport const actions = store => ({\n    // Mendefinisikan fungsi axios untuk api Triposo\n    kategoriKota : async (state,event) => {\n        console.log(\"cek isi e\", event)\n        await store.setState({ idKota:event });\n        console.log(\"cek ganti state idKota\", store.getState().idKota)\n        // console.log(\"cek ganti state idKota\", store.getState().idKota)\n        const url = state.apiUrl+event\n        console.log(\"cek URL\", state.apiUrl)\n        await axios\n        .get(url)\n        .then(function(response) {\n            store.setState({ \n                    listHasilTriposo: response.data.results[0], \n                    listDestinasi: response.data.results[0].images,\n                    latitudeKota: response.data.results[0].coordinates.latitude,\n                    longitudeKota: response.data.results[0].coordinates.longitude,\n                    idKota : response.data.results[0].name,\n                    isLoading: false });\n                // handle success\n                console.log(\"cek isi response\",response);\n            })\n            .catch(function(error) {\n                store.setState({ isLoading: false });\n                // handle error\n                console.log(error);\n            });\n    },\n  \n    changeInput: (state, event) => {\n        store.setState({[event.target.name]: event.target.value});\n    },\n\n    postOriginAndDepartureDate: async (state, city) => {\n        const flyFrom = \"&flyFrom=\" + state.originPlace;\n        const dateFrom = \"&dateFrom=\" + state.departureDate;\n        const dateTo = \"&dateTo=\" + state.departureDate;\n        const url = state.kiwiUrl + flyFrom + dateFrom + dateTo;\n        const self = store;\n        const that = state;\n        await axios\n            .get(url)\n            .then(function (response) {\n                const responseList = response.data.data;\n                const filteredList = responseList.filter(data => {\n                    return data.cityTo === city;\n                }).filter(data => {\n                    const airlineList = that.airlineList;\n                    for (let i=0; i < 7; i++) {\n                        if (airlineList[i] === data.airlines[0]) {\n                            return true;\n                        }\n                    }\n                    return false;\n                });\n                self.setState({ ticketList: filteredList });\n            })\n            .catch(function (error) {\n                console.warn(error);\n            })\n    },\n\n    convertTimestamp: (state, time) => {\n        const date = new Date(time*1000);\n        const stringTime = moment(date).utcOffset(\"+0700\").format(\"HH:mm:ss\");\n        return stringTime;\n    },\n\n    // Atur kategori dinamis untuk idKotA\n    setCategory: (state, category) => {\n        return {idKotA : category}\n    },\n    \n    postLogin : async (state) => {\n        const username = store.getState('username')\n        const password = store.getState('password')\n        const mydata = {\n            username: username,\n            password: password\n        };\n        const test = await axios\n            .post(\"https://groupproject.free.beeceptor.com/masuk\", mydata)\n            .then(response => {\n                return response\n            })\n            .catch(error => {\n                return false\n        })\n        if (test) {\n            store.setState({\n                \"accKey\": test.data.accKey,\n                \"is_login\": true,\n                \"email\": test.data.email,\n                \"username\": test.data.username\n            });\n        }\n    }\n})"]},"metadata":{},"sourceType":"module"}